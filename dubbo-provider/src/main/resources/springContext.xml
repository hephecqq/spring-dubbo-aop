<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-2.5.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
	
<!-- bean的生命周期

	1.BeanFactory:
		1.1 调用InstantiationAwareBeanPostProssor的postProcessBeforeInstantiation()方法
		1.2 实例化
		1.3 调用InstantiationAwareBeanPostProssor的postProcessAfterInstantiation()方法
		1.4 调用postProcessBeforeInstantiation的postProcessPropertyValues()方法
		1.5 设置属性值
		1.6 调用BeanNameAware的setBeanName()方法
		1.7 调用BeanFactoryAware的setBeanFactory()方法
		1.8 调用BeanPostProcessor的postProcessBeforeInitialization()方法
		1.9 调用initializingBean的afterPropertiesSet()方法
		2.0 调用init-mehtod属性配置的初始化方法
		2.1 调用BeanPostProcessor的postProcesAfterInitialization()方法
			singleton:Spring缓存池中准备就绪的Bean
			prototype:将准备就绪的Bean交给使用者
		2.2 容器销毁:调用DisposableBean的afterPropertiesSet()方法
		2.3 调用destory-method属性配置的销毁方法	
			总结：
				1.Bean自身的方法
			    2.后处理器的方法
			    3.其他
			    
	  ApplicationContext中的bean的生命周期:
	  ...
	  ApplicationContextAware的setApplicationContext()方法
	  a.IoC概念所包含的设计思想
	  b.Java语言的反射技术
	  c.BeanFactory,ApplicationContext基础接口
	  d.Resource,ResourceLoader接口
	  e.Bean的生命周期
 -->



</beans>
